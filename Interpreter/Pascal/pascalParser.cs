//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Vadlc/OneDrive/Desktop/Практика/Паскаль/pascal.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class pascalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AND=1, ARRAY=2, BEGIN=3, BOOLEAN=4, CASE=5, CHAR=6, CHR=7, CONST=8, DIV=9, 
		DO=10, DOWNTO=11, ELSE=12, END=13, FILE=14, FOR=15, FUNCTION=16, GOTO=17, 
		IF=18, IN=19, INTEGER=20, LABEL=21, MOD=22, NIL=23, NOT=24, OF=25, OR=26, 
		PACKED=27, PROCEDURE=28, PROGRAM=29, REAL=30, RECORD=31, REPEAT=32, SET=33, 
		THEN=34, TO=35, TYPE=36, UNTIL=37, VAR=38, WHILE=39, WITH=40, PLUS=41, 
		MINUS=42, STAR=43, SLASH=44, ASSIGN=45, COMMA=46, SEMI=47, COLON=48, EQUAL=49, 
		NOT_EQUAL=50, LT=51, LE=52, GE=53, GT=54, LPAREN=55, RPAREN=56, LBRACK=57, 
		LBRACK2=58, RBRACK=59, RBRACK2=60, POINTER=61, AT=62, DOT=63, DOTDOT=64, 
		LCURLY=65, RCURLY=66, UNIT=67, INTERFACE=68, USES=69, STRING=70, IMPLEMENTATION=71, 
		TRUE=72, FALSE=73, WS=74, COMMENT_1=75, COMMENT_2=76, IDENT=77, STRING_LITERAL=78, 
		NUM_INT=79, NUM_REAL=80;
	public const int
		RULE_program = 0, RULE_programHeading = 1, RULE_identifier = 2, RULE_block = 3, 
		RULE_usesUnitsPart = 4, RULE_labelDeclarationPart = 5, RULE_label = 6, 
		RULE_constantDefinitionPart = 7, RULE_constantDefinition = 8, RULE_constantChr = 9, 
		RULE_constant = 10, RULE_unsignedNumber = 11, RULE_unsignedInteger = 12, 
		RULE_unsignedReal = 13, RULE_sign = 14, RULE_bool_ = 15, RULE_string = 16, 
		RULE_typeDefinitionPart = 17, RULE_typeDefinition = 18, RULE_functionType = 19, 
		RULE_procedureType = 20, RULE_type_ = 21, RULE_simpleType = 22, RULE_scalarType = 23, 
		RULE_subrangeType = 24, RULE_typeIdentifier = 25, RULE_structuredType = 26, 
		RULE_unpackedStructuredType = 27, RULE_stringtype = 28, RULE_arrayType = 29, 
		RULE_typeList = 30, RULE_indexType = 31, RULE_componentType = 32, RULE_recordType = 33, 
		RULE_fieldList = 34, RULE_fixedPart = 35, RULE_recordSection = 36, RULE_variantPart = 37, 
		RULE_tag = 38, RULE_variant = 39, RULE_setType = 40, RULE_baseType = 41, 
		RULE_fileType = 42, RULE_pointerType = 43, RULE_variableDeclarationPart = 44, 
		RULE_variableDeclaration = 45, RULE_procedureAndFunctionDeclarationPart = 46, 
		RULE_procedureOrFunctionDeclaration = 47, RULE_procedureDeclaration = 48, 
		RULE_formalParameterList = 49, RULE_formalParameterSection = 50, RULE_parameterGroup = 51, 
		RULE_identifierList = 52, RULE_constList = 53, RULE_functionDeclaration = 54, 
		RULE_resultType = 55, RULE_statement = 56, RULE_unlabelledStatement = 57, 
		RULE_simpleStatement = 58, RULE_assignmentStatement = 59, RULE_variable = 60, 
		RULE_expression = 61, RULE_relationaloperator = 62, RULE_simpleExpression = 63, 
		RULE_additiveoperator = 64, RULE_term = 65, RULE_multiplicativeoperator = 66, 
		RULE_signedFactor = 67, RULE_factor = 68, RULE_unsignedConstant = 69, 
		RULE_functionDesignator = 70, RULE_parameterList = 71, RULE_set_ = 72, 
		RULE_elementList = 73, RULE_element = 74, RULE_procedureStatement = 75, 
		RULE_actualParameter = 76, RULE_parameterwidth = 77, RULE_gotoStatement = 78, 
		RULE_emptyStatement_ = 79, RULE_empty_ = 80, RULE_structuredStatement = 81, 
		RULE_compoundStatement = 82, RULE_statements = 83, RULE_conditionalStatement = 84, 
		RULE_ifStatement = 85, RULE_caseStatement = 86, RULE_caseListElement = 87, 
		RULE_repetetiveStatement = 88, RULE_whileStatement = 89, RULE_repeatStatement = 90, 
		RULE_forStatement = 91, RULE_forList = 92, RULE_initialValue = 93, RULE_finalValue = 94, 
		RULE_withStatement = 95, RULE_recordVariableList = 96;
	public static readonly string[] ruleNames = {
		"program", "programHeading", "identifier", "block", "usesUnitsPart", "labelDeclarationPart", 
		"label", "constantDefinitionPart", "constantDefinition", "constantChr", 
		"constant", "unsignedNumber", "unsignedInteger", "unsignedReal", "sign", 
		"bool_", "string", "typeDefinitionPart", "typeDefinition", "functionType", 
		"procedureType", "type_", "simpleType", "scalarType", "subrangeType", 
		"typeIdentifier", "structuredType", "unpackedStructuredType", "stringtype", 
		"arrayType", "typeList", "indexType", "componentType", "recordType", "fieldList", 
		"fixedPart", "recordSection", "variantPart", "tag", "variant", "setType", 
		"baseType", "fileType", "pointerType", "variableDeclarationPart", "variableDeclaration", 
		"procedureAndFunctionDeclarationPart", "procedureOrFunctionDeclaration", 
		"procedureDeclaration", "formalParameterList", "formalParameterSection", 
		"parameterGroup", "identifierList", "constList", "functionDeclaration", 
		"resultType", "statement", "unlabelledStatement", "simpleStatement", "assignmentStatement", 
		"variable", "expression", "relationaloperator", "simpleExpression", "additiveoperator", 
		"term", "multiplicativeoperator", "signedFactor", "factor", "unsignedConstant", 
		"functionDesignator", "parameterList", "set_", "elementList", "element", 
		"procedureStatement", "actualParameter", "parameterwidth", "gotoStatement", 
		"emptyStatement_", "empty_", "structuredStatement", "compoundStatement", 
		"statements", "conditionalStatement", "ifStatement", "caseStatement", 
		"caseListElement", "repetetiveStatement", "whileStatement", "repeatStatement", 
		"forStatement", "forList", "initialValue", "finalValue", "withStatement", 
		"recordVariableList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'AND'", "'ARRAY'", "'BEGIN'", "'BOOLEAN'", "'CASE'", "'CHAR'", 
		"'CHR'", "'CONST'", "'DIV'", "'DO'", "'DOWNTO'", "'ELSE'", "'END'", "'FILE'", 
		"'FOR'", "'FUNCTION'", "'GOTO'", "'IF'", "'IN'", "'INTEGER'", "'LABEL'", 
		"'MOD'", "'NIL'", "'NOT'", "'OF'", "'OR'", "'PACKED'", "'PROCEDURE'", 
		"'PROGRAM'", "'REAL'", "'RECORD'", "'REPEAT'", "'SET'", "'THEN'", "'TO'", 
		"'TYPE'", "'UNTIL'", "'VAR'", "'WHILE'", "'WITH'", "'+'", "'-'", "'*'", 
		"'/'", "':='", "','", "';'", "':'", "'='", "'<>'", "'<'", "'<='", "'>='", 
		"'>'", "'('", "')'", "'['", "'(.'", "']'", "'.)'", "'^'", "'@'", "'.'", 
		"'..'", "'{'", "'}'", "'UNIT'", "'INTERFACE'", "'USES'", "'STRING'", "'IMPLEMENTATION'", 
		"'TRUE'", "'FALSE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AND", "ARRAY", "BEGIN", "BOOLEAN", "CASE", "CHAR", "CHR", "CONST", 
		"DIV", "DO", "DOWNTO", "ELSE", "END", "FILE", "FOR", "FUNCTION", "GOTO", 
		"IF", "IN", "INTEGER", "LABEL", "MOD", "NIL", "NOT", "OF", "OR", "PACKED", 
		"PROCEDURE", "PROGRAM", "REAL", "RECORD", "REPEAT", "SET", "THEN", "TO", 
		"TYPE", "UNTIL", "VAR", "WHILE", "WITH", "PLUS", "MINUS", "STAR", "SLASH", 
		"ASSIGN", "COMMA", "SEMI", "COLON", "EQUAL", "NOT_EQUAL", "LT", "LE", 
		"GE", "GT", "LPAREN", "RPAREN", "LBRACK", "LBRACK2", "RBRACK", "RBRACK2", 
		"POINTER", "AT", "DOT", "DOTDOT", "LCURLY", "RCURLY", "UNIT", "INTERFACE", 
		"USES", "STRING", "IMPLEMENTATION", "TRUE", "FALSE", "WS", "COMMENT_1", 
		"COMMENT_2", "IDENT", "STRING_LITERAL", "NUM_INT", "NUM_REAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pascal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static pascalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pascalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pascalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramHeadingContext programHeading() {
			return GetRuleContext<ProgramHeadingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pascalParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(pascalParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(pascalParser.INTERFACE, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			programHeading();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERFACE) {
				{
				State = 195;
				Match(INTERFACE);
				}
			}

			State = 198;
			block();
			State = 199;
			Match(DOT);
			State = 200;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramHeadingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(pascalParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(pascalParser.UNIT, 0); }
		public ProgramHeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programHeading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProgramHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProgramHeading(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramHeadingContext programHeading() {
		ProgramHeadingContext _localctx = new ProgramHeadingContext(Context, State);
		EnterRule(_localctx, 2, RULE_programHeading);
		int _la;
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				Match(PROGRAM);
				State = 203;
				identifier();
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 204;
					Match(LPAREN);
					State = 205;
					identifierList();
					State = 206;
					Match(RPAREN);
					}
				}

				State = 210;
				Match(SEMI);
				}
				break;
			case UNIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				Match(UNIT);
				State = 213;
				identifier();
				State = 214;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(pascalParser.IDENT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDeclarationPartContext[] labelDeclarationPart() {
			return GetRuleContexts<LabelDeclarationPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDeclarationPartContext labelDeclarationPart(int i) {
			return GetRuleContext<LabelDeclarationPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefinitionPartContext[] constantDefinitionPart() {
			return GetRuleContexts<ConstantDefinitionPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefinitionPartContext constantDefinitionPart(int i) {
			return GetRuleContext<ConstantDefinitionPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionPartContext[] typeDefinitionPart() {
			return GetRuleContexts<TypeDefinitionPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionPartContext typeDefinitionPart(int i) {
			return GetRuleContext<TypeDefinitionPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationPartContext[] variableDeclarationPart() {
			return GetRuleContexts<VariableDeclarationPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationPartContext variableDeclarationPart(int i) {
			return GetRuleContext<VariableDeclarationPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureAndFunctionDeclarationPartContext[] procedureAndFunctionDeclarationPart() {
			return GetRuleContexts<ProcedureAndFunctionDeclarationPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureAndFunctionDeclarationPartContext procedureAndFunctionDeclarationPart(int i) {
			return GetRuleContext<ProcedureAndFunctionDeclarationPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsesUnitsPartContext[] usesUnitsPart() {
			return GetRuleContexts<UsesUnitsPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsesUnitsPartContext usesUnitsPart(int i) {
			return GetRuleContext<UsesUnitsPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMPLEMENTATION() { return GetTokens(pascalParser.IMPLEMENTATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTATION(int i) {
			return GetToken(pascalParser.IMPLEMENTATION, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & -6917529026297847551L) != 0)) {
				{
				State = 227;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LABEL:
					{
					State = 220;
					labelDeclarationPart();
					}
					break;
				case CONST:
					{
					State = 221;
					constantDefinitionPart();
					}
					break;
				case TYPE:
					{
					State = 222;
					typeDefinitionPart();
					}
					break;
				case VAR:
					{
					State = 223;
					variableDeclarationPart();
					}
					break;
				case FUNCTION:
				case PROCEDURE:
					{
					State = 224;
					procedureAndFunctionDeclarationPart();
					}
					break;
				case USES:
					{
					State = 225;
					usesUnitsPart();
					}
					break;
				case IMPLEMENTATION:
					{
					State = 226;
					Match(IMPLEMENTATION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 232;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsesUnitsPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USES() { return GetToken(pascalParser.USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public UsesUnitsPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usesUnitsPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUsesUnitsPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUsesUnitsPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsesUnitsPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsesUnitsPartContext usesUnitsPart() {
		UsesUnitsPartContext _localctx = new UsesUnitsPartContext(Context, State);
		EnterRule(_localctx, 8, RULE_usesUnitsPart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(USES);
			State = 235;
			identifierList();
			State = 236;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDeclarationPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(pascalParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public LabelDeclarationPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDeclarationPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterLabelDeclarationPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitLabelDeclarationPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDeclarationPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDeclarationPartContext labelDeclarationPart() {
		LabelDeclarationPartContext _localctx = new LabelDeclarationPartContext(Context, State);
		EnterRule(_localctx, 10, RULE_labelDeclarationPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(LABEL);
			State = 239;
			label();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 240;
				Match(COMMA);
				State = 241;
				label();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 247;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 12, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			unsignedInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefinitionPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(pascalParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefinitionContext[] constantDefinition() {
			return GetRuleContexts<ConstantDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefinitionContext constantDefinition(int i) {
			return GetRuleContext<ConstantDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public ConstantDefinitionPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDefinitionPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstantDefinitionPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstantDefinitionPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDefinitionPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefinitionPartContext constantDefinitionPart() {
		ConstantDefinitionPartContext _localctx = new ConstantDefinitionPartContext(Context, State);
		EnterRule(_localctx, 14, RULE_constantDefinitionPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(CONST);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 252;
				constantDefinition();
				State = 253;
				Match(SEMI);
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(pascalParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstantDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstantDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefinitionContext constantDefinition() {
		ConstantDefinitionContext _localctx = new ConstantDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_constantDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			identifier();
			State = 260;
			Match(EQUAL);
			State = 261;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantChrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(pascalParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public ConstantChrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantChr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstantChr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstantChr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantChr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantChrContext constantChr() {
		ConstantChrContext _localctx = new ConstantChrContext(Context, State);
		EnterRule(_localctx, 18, RULE_constantChr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(CHR);
			State = 264;
			Match(LPAREN);
			State = 265;
			unsignedInteger();
			State = 266;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedNumberContext unsignedNumber() {
			return GetRuleContext<UnsignedNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantChrContext constantChr() {
			return GetRuleContext<ConstantChrContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 20, RULE_constant);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				unsignedNumber();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				sign();
				State = 270;
				unsignedNumber();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272;
				identifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 273;
				sign();
				State = 274;
				identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 276;
				@string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 277;
				constantChr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedRealContext unsignedReal() {
			return GetRuleContext<UnsignedRealContext>(0);
		}
		public UnsignedNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnsignedNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnsignedNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedNumberContext unsignedNumber() {
		UnsignedNumberContext _localctx = new UnsignedNumberContext(Context, State);
		EnterRule(_localctx, 22, RULE_unsignedNumber);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				unsignedInteger();
				}
				break;
			case NUM_REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				unsignedReal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_INT() { return GetToken(pascalParser.NUM_INT, 0); }
		public UnsignedIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnsignedInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnsignedInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntegerContext unsignedInteger() {
		UnsignedIntegerContext _localctx = new UnsignedIntegerContext(Context, State);
		EnterRule(_localctx, 24, RULE_unsignedInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(NUM_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedRealContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_REAL() { return GetToken(pascalParser.NUM_REAL, 0); }
		public UnsignedRealContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedReal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnsignedReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnsignedReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedReal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedRealContext unsignedReal() {
		UnsignedRealContext _localctx = new UnsignedRealContext(Context, State);
		EnterRule(_localctx, 26, RULE_unsignedReal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(NUM_REAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(pascalParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(pascalParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 28, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(pascalParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(pascalParser.FALSE, 0); }
		public Bool_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterBool_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitBool_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_Context bool_() {
		Bool_Context _localctx = new Bool_Context(Context, State);
		EnterRule(_localctx, 30, RULE_bool_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pascalParser.STRING_LITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 32, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(pascalParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext[] typeDefinition() {
			return GetRuleContexts<TypeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition(int i) {
			return GetRuleContext<TypeDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public TypeDefinitionPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinitionPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTypeDefinitionPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTypeDefinitionPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinitionPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionPartContext typeDefinitionPart() {
		TypeDefinitionPartContext _localctx = new TypeDefinitionPartContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeDefinitionPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(TYPE);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 295;
				typeDefinition();
				State = 296;
				Match(SEMI);
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(pascalParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureTypeContext procedureType() {
			return GetRuleContext<ProcedureTypeContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTypeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTypeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			identifier();
			State = 303;
			Match(EQUAL);
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
			case BOOLEAN:
			case CHAR:
			case CHR:
			case FILE:
			case INTEGER:
			case PACKED:
			case REAL:
			case RECORD:
			case SET:
			case PLUS:
			case MINUS:
			case LPAREN:
			case POINTER:
			case STRING:
			case IDENT:
			case STRING_LITERAL:
			case NUM_INT:
			case NUM_REAL:
				{
				State = 304;
				type_();
				}
				break;
			case FUNCTION:
				{
				State = 305;
				functionType();
				}
				break;
			case PROCEDURE:
				{
				State = 306;
				procedureType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(pascalParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(FUNCTION);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 310;
				formalParameterList();
				}
			}

			State = 313;
			Match(COLON);
			State = 314;
			resultType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(pascalParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ProcedureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureTypeContext procedureType() {
		ProcedureTypeContext _localctx = new ProcedureTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_procedureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(PROCEDURE);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 317;
				formalParameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredTypeContext structuredType() {
			return GetRuleContext<StructuredTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 42, RULE_type_);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case CHAR:
			case CHR:
			case INTEGER:
			case REAL:
			case PLUS:
			case MINUS:
			case LPAREN:
			case STRING:
			case IDENT:
			case STRING_LITERAL:
			case NUM_INT:
			case NUM_REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				simpleType();
				}
				break;
			case ARRAY:
			case FILE:
			case PACKED:
			case RECORD:
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				structuredType();
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322;
				pointerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeTypeContext subrangeType() {
			return GetRuleContext<SubrangeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringtypeContext stringtype() {
			return GetRuleContext<StringtypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_simpleType);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325;
				scalarType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326;
				subrangeType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 327;
				typeIdentifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 328;
				stringtype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterScalarType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitScalarType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_scalarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(LPAREN);
			State = 332;
			identifierList();
			State = 333;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(pascalParser.DOTDOT, 0); }
		public SubrangeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSubrangeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSubrangeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeContext subrangeType() {
		SubrangeTypeContext _localctx = new SubrangeTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_subrangeType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			constant();
			State = 336;
			Match(DOTDOT);
			State = 337;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(pascalParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(pascalParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pascalParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(pascalParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(pascalParser.STRING, 0); }
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_typeIdentifier);
		int _la;
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				identifier();
				}
				break;
			case BOOLEAN:
			case CHAR:
			case INTEGER:
			case REAL:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1074790480L) != 0) || _la==STRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKED() { return GetToken(pascalParser.PACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnpackedStructuredTypeContext unpackedStructuredType() {
			return GetRuleContext<UnpackedStructuredTypeContext>(0);
		}
		public StructuredTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStructuredType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStructuredType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredTypeContext structuredType() {
		StructuredTypeContext _localctx = new StructuredTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_structuredType);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PACKED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				Match(PACKED);
				State = 344;
				unpackedStructuredType();
				}
				break;
			case ARRAY:
			case FILE:
			case RECORD:
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345;
				unpackedStructuredType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpackedStructuredTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordTypeContext recordType() {
			return GetRuleContext<RecordTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetTypeContext setType() {
			return GetRuleContext<SetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileTypeContext fileType() {
			return GetRuleContext<FileTypeContext>(0);
		}
		public UnpackedStructuredTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpackedStructuredType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnpackedStructuredType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnpackedStructuredType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpackedStructuredType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpackedStructuredTypeContext unpackedStructuredType() {
		UnpackedStructuredTypeContext _localctx = new UnpackedStructuredTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_unpackedStructuredType);
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				arrayType();
				}
				break;
			case RECORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349;
				recordType();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 350;
				setType();
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 351;
				fileType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(pascalParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(pascalParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(pascalParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedNumberContext unsignedNumber() {
			return GetRuleContext<UnsignedNumberContext>(0);
		}
		public StringtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStringtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStringtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringtypeContext stringtype() {
		StringtypeContext _localctx = new StringtypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_stringtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(STRING);
			State = 355;
			Match(LBRACK);
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 356;
				identifier();
				}
				break;
			case NUM_INT:
			case NUM_REAL:
				{
				State = 357;
				unsignedNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 360;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(pascalParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(pascalParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(pascalParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComponentTypeContext componentType() {
			return GetRuleContext<ComponentTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK2() { return GetToken(pascalParser.LBRACK2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK2() { return GetToken(pascalParser.RBRACK2, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_arrayType);
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362;
				Match(ARRAY);
				State = 363;
				Match(LBRACK);
				State = 364;
				typeList();
				State = 365;
				Match(RBRACK);
				State = 366;
				Match(OF);
				State = 367;
				componentType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369;
				Match(ARRAY);
				State = 370;
				Match(LBRACK2);
				State = 371;
				typeList();
				State = 372;
				Match(RBRACK2);
				State = 373;
				Match(OF);
				State = 374;
				componentType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext[] indexType() {
			return GetRuleContexts<IndexTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType(int i) {
			return GetRuleContext<IndexTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			indexType();
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 379;
				Match(COMMA);
				State = 380;
				indexType();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_indexType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			simpleType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ComponentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterComponentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitComponentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentTypeContext componentType() {
		ComponentTypeContext _localctx = new ComponentTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_componentType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECORD() { return GetToken(pascalParser.RECORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(pascalParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldListContext fieldList() {
			return GetRuleContext<FieldListContext>(0);
		}
		public RecordTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRecordType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRecordType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordTypeContext recordType() {
		RecordTypeContext _localctx = new RecordTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_recordType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(RECORD);
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASE || _la==IDENT) {
				{
				State = 391;
				fieldList();
				}
			}

			State = 394;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedPartContext fixedPart() {
			return GetRuleContext<FixedPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantPartContext variantPart() {
			return GetRuleContext<VariantPartContext>(0);
		}
		public FieldListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFieldList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFieldList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldListContext fieldList() {
		FieldListContext _localctx = new FieldListContext(Context, State);
		EnterRule(_localctx, 68, RULE_fieldList);
		int _la;
		try {
			State = 402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 396;
				fixedPart();
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 397;
					Match(SEMI);
					State = 398;
					variantPart();
					}
				}

				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				variantPart();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordSectionContext[] recordSection() {
			return GetRuleContexts<RecordSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordSectionContext recordSection(int i) {
			return GetRuleContext<RecordSectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public FixedPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFixedPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFixedPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedPartContext fixedPart() {
		FixedPartContext _localctx = new FixedPartContext(Context, State);
		EnterRule(_localctx, 70, RULE_fixedPart);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			recordSection();
			State = 409;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 405;
					Match(SEMI);
					State = 406;
					recordSection();
					}
					} 
				}
				State = 411;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public RecordSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRecordSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRecordSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordSectionContext recordSection() {
		RecordSectionContext _localctx = new RecordSectionContext(Context, State);
		EnterRule(_localctx, 72, RULE_recordSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			identifierList();
			State = 413;
			Match(COLON);
			State = 414;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(pascalParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext[] variant() {
			return GetRuleContexts<VariantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext variant(int i) {
			return GetRuleContext<VariantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public VariantPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariantPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariantPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantPartContext variantPart() {
		VariantPartContext _localctx = new VariantPartContext(Context, State);
		EnterRule(_localctx, 74, RULE_variantPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(CASE);
			State = 417;
			tag();
			State = 418;
			Match(OF);
			State = 419;
			variant();
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 420;
				Match(SEMI);
				State = 421;
				variant();
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 76, RULE_tag);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427;
				identifier();
				State = 428;
				Match(COLON);
				State = 429;
				typeIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				typeIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstListContext constList() {
			return GetRuleContext<ConstListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldListContext fieldList() {
			return GetRuleContext<FieldListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public VariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantContext variant() {
		VariantContext _localctx = new VariantContext(Context, State);
		EnterRule(_localctx, 78, RULE_variant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			constList();
			State = 435;
			Match(COLON);
			State = 436;
			Match(LPAREN);
			State = 437;
			fieldList();
			State = 438;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(pascalParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTypeContext setType() {
		SetTypeContext _localctx = new SetTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_setType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(SET);
			State = 441;
			Match(OF);
			State = 442;
			baseType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_baseType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			simpleType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(pascalParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public FileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFileType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFileType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileTypeContext fileType() {
		FileTypeContext _localctx = new FileTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_fileType);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				Match(FILE);
				State = 447;
				Match(OF);
				State = 448;
				type_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449;
				Match(FILE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(pascalParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			Match(POINTER);
			State = 453;
			typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(pascalParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public VariableDeclarationPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationPartContext variableDeclarationPart() {
		VariableDeclarationPartContext _localctx = new VariableDeclarationPartContext(Context, State);
		EnterRule(_localctx, 88, RULE_variableDeclarationPart);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(VAR);
			State = 456;
			variableDeclaration();
			State = 461;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 457;
					Match(SEMI);
					State = 458;
					variableDeclaration();
					}
					} 
				}
				State = 463;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			State = 464;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			identifierList();
			State = 467;
			Match(COLON);
			State = 468;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureAndFunctionDeclarationPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureOrFunctionDeclarationContext procedureOrFunctionDeclaration() {
			return GetRuleContext<ProcedureOrFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public ProcedureAndFunctionDeclarationPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureAndFunctionDeclarationPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureAndFunctionDeclarationPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureAndFunctionDeclarationPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureAndFunctionDeclarationPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureAndFunctionDeclarationPartContext procedureAndFunctionDeclarationPart() {
		ProcedureAndFunctionDeclarationPartContext _localctx = new ProcedureAndFunctionDeclarationPartContext(Context, State);
		EnterRule(_localctx, 92, RULE_procedureAndFunctionDeclarationPart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			procedureOrFunctionDeclaration();
			State = 471;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureOrFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclarationContext procedureDeclaration() {
			return GetRuleContext<ProcedureDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ProcedureOrFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureOrFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureOrFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureOrFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureOrFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureOrFunctionDeclarationContext procedureOrFunctionDeclaration() {
		ProcedureOrFunctionDeclarationContext _localctx = new ProcedureOrFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_procedureOrFunctionDeclaration);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473;
				procedureDeclaration();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474;
				functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(pascalParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ProcedureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationContext procedureDeclaration() {
		ProcedureDeclarationContext _localctx = new ProcedureDeclarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_procedureDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			Match(PROCEDURE);
			State = 478;
			identifier();
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 479;
				formalParameterList();
				}
			}

			State = 482;
			Match(SEMI);
			State = 483;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterSectionContext[] formalParameterSection() {
			return GetRuleContexts<FormalParameterSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterSectionContext formalParameterSection(int i) {
			return GetRuleContext<FormalParameterSectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 98, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(LPAREN);
			State = 486;
			formalParameterSection();
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 487;
				Match(SEMI);
				State = 488;
				formalParameterSection();
				}
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 494;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterGroupContext parameterGroup() {
			return GetRuleContext<ParameterGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(pascalParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(pascalParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(pascalParser.PROCEDURE, 0); }
		public FormalParameterSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFormalParameterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFormalParameterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterSectionContext formalParameterSection() {
		FormalParameterSectionContext _localctx = new FormalParameterSectionContext(Context, State);
		EnterRule(_localctx, 100, RULE_formalParameterSection);
		try {
			State = 503;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 496;
				parameterGroup();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 497;
				Match(VAR);
				State = 498;
				parameterGroup();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 499;
				Match(FUNCTION);
				State = 500;
				parameterGroup();
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 501;
				Match(PROCEDURE);
				State = 502;
				parameterGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public ParameterGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterParameterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitParameterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterGroupContext parameterGroup() {
		ParameterGroupContext _localctx = new ParameterGroupContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameterGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			identifierList();
			State = 506;
			Match(COLON);
			State = 507;
			typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 104, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			identifier();
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 510;
				Match(COMMA);
				State = 511;
				identifier();
				}
				}
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public ConstListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstListContext constList() {
		ConstListContext _localctx = new ConstListContext(Context, State);
		EnterRule(_localctx, 106, RULE_constList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			constant();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 518;
				Match(COMMA);
				State = 519;
				constant();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(pascalParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(FUNCTION);
			State = 526;
			identifier();
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 527;
				formalParameterList();
				}
			}

			State = 530;
			Match(COLON);
			State = 531;
			resultType();
			State = 532;
			Match(SEMI);
			State = 533;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public ResultTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterResultType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitResultType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultTypeContext resultType() {
		ResultTypeContext _localctx = new ResultTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_resultType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnlabelledStatementContext unlabelledStatement() {
			return GetRuleContext<UnlabelledStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_statement);
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				label();
				State = 538;
				Match(COLON);
				State = 539;
				unlabelledStatement();
				}
				break;
			case BEGIN:
			case CASE:
			case ELSE:
			case END:
			case FOR:
			case GOTO:
			case IF:
			case REPEAT:
			case UNTIL:
			case WHILE:
			case WITH:
			case SEMI:
			case AT:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541;
				unlabelledStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredStatementContext structuredStatement() {
			return GetRuleContext<StructuredStatementContext>(0);
		}
		public UnlabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnlabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnlabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlabelledStatementContext unlabelledStatement() {
		UnlabelledStatementContext _localctx = new UnlabelledStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_unlabelledStatement);
		try {
			State = 546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
			case END:
			case GOTO:
			case UNTIL:
			case SEMI:
			case AT:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544;
				simpleStatement();
				}
				break;
			case BEGIN:
			case CASE:
			case FOR:
			case IF:
			case REPEAT:
			case WHILE:
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 545;
				structuredStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureStatementContext procedureStatement() {
			return GetRuleContext<ProcedureStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_simpleStatement);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548;
				assignmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549;
				procedureStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 550;
				gotoStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 551;
				emptyStatement_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(pascalParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			variable();
			State = 555;
			Match(ASSIGN);
			State = 556;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(pascalParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(pascalParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(pascalParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(pascalParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(pascalParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK2() { return GetTokens(pascalParser.LBRACK2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK2(int i) {
			return GetToken(pascalParser.LBRACK2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK2() { return GetTokens(pascalParser.RBRACK2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK2(int i) {
			return GetToken(pascalParser.RBRACK2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(pascalParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(pascalParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POINTER() { return GetTokens(pascalParser.POINTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER(int i) {
			return GetToken(pascalParser.POINTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 120, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				{
				State = 558;
				Match(AT);
				State = 559;
				identifier();
				}
				break;
			case IDENT:
				{
				State = 560;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6485183463413514240L) != 0)) {
				{
				State = 588;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACK:
					{
					State = 563;
					Match(LBRACK);
					State = 564;
					expression();
					State = 569;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 565;
						Match(COMMA);
						State = 566;
						expression();
						}
						}
						State = 571;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 572;
					Match(RBRACK);
					}
					break;
				case LBRACK2:
					{
					State = 574;
					Match(LBRACK2);
					State = 575;
					expression();
					State = 580;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 576;
						Match(COMMA);
						State = 577;
						expression();
						}
						}
						State = 582;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 583;
					Match(RBRACK2);
					}
					break;
				case DOT:
					{
					State = 585;
					Match(DOT);
					State = 586;
					identifier();
					}
					break;
				case POINTER:
					{
					State = 587;
					Match(POINTER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationaloperatorContext relationaloperator() {
			return GetRuleContext<RelationaloperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			simpleExpression();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35465847066066944L) != 0)) {
				{
				State = 594;
				relationaloperator();
				State = 595;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationaloperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(pascalParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(pascalParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(pascalParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(pascalParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(pascalParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(pascalParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(pascalParser.IN, 0); }
		public RelationaloperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationaloperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRelationaloperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRelationaloperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationaloperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationaloperatorContext relationaloperator() {
		RelationaloperatorContext _localctx = new RelationaloperatorContext(Context, State);
		EnterRule(_localctx, 124, RULE_relationaloperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 35465847066066944L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveoperatorContext additiveoperator() {
			return GetRuleContext<AdditiveoperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			term();
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6597136875520L) != 0)) {
				{
				State = 602;
				additiveoperator();
				State = 603;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveoperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(pascalParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(pascalParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(pascalParser.OR, 0); }
		public AdditiveoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveoperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterAdditiveoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitAdditiveoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveoperatorContext additiveoperator() {
		AdditiveoperatorContext _localctx = new AdditiveoperatorContext(Context, State);
		EnterRule(_localctx, 128, RULE_additiveoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6597136875520L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignedFactorContext signedFactor() {
			return GetRuleContext<SignedFactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeoperatorContext multiplicativeoperator() {
			return GetRuleContext<MultiplicativeoperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 130, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			signedFactor();
			State = 613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26388283261442L) != 0)) {
				{
				State = 610;
				multiplicativeoperator();
				State = 611;
				term();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeoperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(pascalParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(pascalParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(pascalParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(pascalParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pascalParser.AND, 0); }
		public MultiplicativeoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeoperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterMultiplicativeoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitMultiplicativeoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeoperatorContext multiplicativeoperator() {
		MultiplicativeoperatorContext _localctx = new MultiplicativeoperatorContext(Context, State);
		EnterRule(_localctx, 132, RULE_multiplicativeoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 26388283261442L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(pascalParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(pascalParser.MINUS, 0); }
		public SignedFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSignedFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSignedFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedFactorContext signedFactor() {
		SignedFactorContext _localctx = new SignedFactorContext(Context, State);
		EnterRule(_localctx, 134, RULE_signedFactor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 617;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 620;
			factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDesignatorContext functionDesignator() {
			return GetRuleContext<FunctionDesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedConstantContext unsignedConstant() {
			return GetRuleContext<UnsignedConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_Context set_() {
			return GetRuleContext<Set_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(pascalParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_Context bool_() {
			return GetRuleContext<Bool_Context>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 136, RULE_factor);
		try {
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 622;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 623;
				Match(LPAREN);
				State = 624;
				expression();
				State = 625;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 627;
				functionDesignator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 628;
				unsignedConstant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 629;
				set_();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 630;
				Match(NOT);
				State = 631;
				factor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 632;
				bool_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedNumberContext unsignedNumber() {
			return GetRuleContext<UnsignedNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantChrContext constantChr() {
			return GetRuleContext<ConstantChrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(pascalParser.NIL, 0); }
		public UnsignedConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedConstantContext unsignedConstant() {
		UnsignedConstantContext _localctx = new UnsignedConstantContext(Context, State);
		EnterRule(_localctx, 138, RULE_unsignedConstant);
		try {
			State = 639;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
			case NUM_REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 635;
				unsignedNumber();
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636;
				constantChr();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 637;
				@string();
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 638;
				Match(NIL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public FunctionDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDesignator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFunctionDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFunctionDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDesignatorContext functionDesignator() {
		FunctionDesignatorContext _localctx = new FunctionDesignatorContext(Context, State);
		EnterRule(_localctx, 140, RULE_functionDesignator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			identifier();
			State = 642;
			Match(LPAREN);
			State = 643;
			parameterList();
			State = 644;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterContext[] actualParameter() {
			return GetRuleContexts<ActualParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterContext actualParameter(int i) {
			return GetRuleContext<ActualParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 142, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			actualParameter();
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 647;
				Match(COMMA);
				State = 648;
				actualParameter();
				}
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(pascalParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(pascalParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK2() { return GetToken(pascalParser.LBRACK2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK2() { return GetToken(pascalParser.RBRACK2, 0); }
		public Set_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSet_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSet_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_Context set_() {
		Set_Context _localctx = new Set_Context(Context, State);
		EnterRule(_localctx, 144, RULE_set_);
		try {
			State = 662;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 654;
				Match(LBRACK);
				State = 655;
				elementList();
				State = 656;
				Match(RBRACK);
				}
				break;
			case LBRACK2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 658;
				Match(LBRACK2);
				State = 659;
				elementList();
				State = 660;
				Match(RBRACK2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 146, RULE_elementList);
		int _la;
		try {
			State = 673;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHR:
			case NIL:
			case NOT:
			case PLUS:
			case MINUS:
			case LPAREN:
			case LBRACK:
			case LBRACK2:
			case AT:
			case TRUE:
			case FALSE:
			case IDENT:
			case STRING_LITERAL:
			case NUM_INT:
			case NUM_REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 664;
				element();
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 665;
					Match(COMMA);
					State = 666;
					element();
					}
					}
					State = 671;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACK:
			case RBRACK2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(pascalParser.DOTDOT, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 148, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			expression();
			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOTDOT) {
				{
				State = 676;
				Match(DOTDOT);
				State = 677;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public ProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStatementContext procedureStatement() {
		ProcedureStatementContext _localctx = new ProcedureStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_procedureStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			identifier();
			State = 685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 681;
				Match(LPAREN);
				State = 682;
				parameterList();
				State = 683;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterwidthContext[] parameterwidth() {
			return GetRuleContexts<ParameterwidthContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterwidthContext parameterwidth(int i) {
			return GetRuleContext<ParameterwidthContext>(i);
		}
		public ActualParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterActualParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitActualParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterContext actualParameter() {
		ActualParameterContext _localctx = new ActualParameterContext(Context, State);
		EnterRule(_localctx, 152, RULE_actualParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			expression();
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 688;
				parameterwidth();
				}
				}
				State = 693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterwidthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterwidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterwidth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterParameterwidth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitParameterwidth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterwidth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterwidthContext parameterwidth() {
		ParameterwidthContext _localctx = new ParameterwidthContext(Context, State);
		EnterRule(_localctx, 154, RULE_parameterwidth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(COLON);
			State = 695;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(pascalParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(GOTO);
			State = 698;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 158, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_Context : ParserRuleContext {
		public Empty_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterEmpty_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitEmpty_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_Context empty_() {
		Empty_Context _localctx = new Empty_Context(Context, State);
		EnterRule(_localctx, 160, RULE_empty_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepetetiveStatementContext repetetiveStatement() {
			return GetRuleContext<RepetetiveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public StructuredStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredStatementContext structuredStatement() {
		StructuredStatementContext _localctx = new StructuredStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_structuredStatement);
		try {
			State = 708;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				compoundStatement();
				}
				break;
			case CASE:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705;
				conditionalStatement();
				}
				break;
			case FOR:
			case REPEAT:
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 706;
				repetetiveStatement();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 707;
				withStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(pascalParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(pascalParser.END, 0); }
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_compoundStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			Match(BEGIN);
			State = 711;
			statements();
			State = 712;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 166, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			statement();
			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 715;
				Match(SEMI);
				State = 716;
				statement();
				}
				}
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_conditionalStatement);
		try {
			State = 724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 722;
				ifStatement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 723;
				caseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(pascalParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(pascalParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(pascalParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(IF);
			State = 727;
			expression();
			State = 728;
			Match(THEN);
			State = 729;
			statement();
			State = 732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 730;
				Match(ELSE);
				State = 731;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(pascalParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(pascalParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(pascalParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 172, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			Match(CASE);
			State = 735;
			expression();
			State = 736;
			Match(OF);
			State = 737;
			caseListElement();
			State = 742;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 738;
					Match(SEMI);
					State = 739;
					caseListElement();
					}
					} 
				}
				State = 744;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 745;
				Match(SEMI);
				State = 746;
				Match(ELSE);
				State = 747;
				statements();
				}
			}

			State = 750;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstListContext constList() {
			return GetRuleContext<ConstListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterCaseListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitCaseListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 174, RULE_caseListElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 752;
			constList();
			State = 753;
			Match(COLON);
			State = 754;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetetiveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public RepetetiveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetetiveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRepetetiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRepetetiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetetiveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetetiveStatementContext repetetiveStatement() {
		RepetetiveStatementContext _localctx = new RepetetiveStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_repetetiveStatement);
		try {
			State = 759;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 756;
				whileStatement();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 757;
				repeatStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 758;
				forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(pascalParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(pascalParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(WHILE);
			State = 762;
			expression();
			State = 763;
			Match(DO);
			State = 764;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(pascalParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(pascalParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			Match(REPEAT);
			State = 767;
			statements();
			State = 768;
			Match(UNTIL);
			State = 769;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(pascalParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(pascalParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForListContext forList() {
			return GetRuleContext<ForListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(pascalParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 182, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			Match(FOR);
			State = 772;
			identifier();
			State = 773;
			Match(ASSIGN);
			State = 774;
			forList();
			State = 775;
			Match(DO);
			State = 776;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitialValueContext initialValue() {
			return GetRuleContext<InitialValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinalValueContext finalValue() {
			return GetRuleContext<FinalValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(pascalParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOWNTO() { return GetToken(pascalParser.DOWNTO, 0); }
		public ForListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterForList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitForList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForListContext forList() {
		ForListContext _localctx = new ForListContext(Context, State);
		EnterRule(_localctx, 184, RULE_forList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			initialValue();
			State = 779;
			_la = TokenStream.LA(1);
			if ( !(_la==DOWNTO || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 780;
			finalValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitialValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterInitialValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitInitialValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialValueContext initialValue() {
		InitialValueContext _localctx = new InitialValueContext(Context, State);
		EnterRule(_localctx, 186, RULE_initialValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinalValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FinalValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFinalValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFinalValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinalValueContext finalValue() {
		FinalValueContext _localctx = new FinalValueContext(Context, State);
		EnterRule(_localctx, 188, RULE_finalValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pascalParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordVariableListContext recordVariableList() {
			return GetRuleContext<RecordVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(pascalParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			Match(WITH);
			State = 787;
			recordVariableList();
			State = 788;
			Match(DO);
			State = 789;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public RecordVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRecordVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRecordVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordVariableListContext recordVariableList() {
		RecordVariableListContext _localctx = new RecordVariableListContext(Context, State);
		EnterRule(_localctx, 192, RULE_recordVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			variable();
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 792;
				Match(COMMA);
				State = 793;
				variable();
				}
				}
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,80,800,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,1,0,3,0,197,8,0,
		1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,209,8,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,1,217,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,228,8,3,10,3,
		12,3,231,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,243,8,5,10,5,
		12,5,246,9,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,4,7,256,8,7,11,7,12,7,257,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,3,10,279,8,10,1,11,1,11,3,11,283,8,11,1,12,1,12,1,13,1,
		13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,4,17,299,8,17,11,
		17,12,17,300,1,18,1,18,1,18,1,18,1,18,3,18,308,8,18,1,19,1,19,3,19,312,
		8,19,1,19,1,19,1,19,1,20,1,20,3,20,319,8,20,1,21,1,21,1,21,3,21,324,8,
		21,1,22,1,22,1,22,1,22,3,22,330,8,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,25,1,25,3,25,342,8,25,1,26,1,26,1,26,3,26,347,8,26,1,27,1,27,1,
		27,1,27,3,27,353,8,27,1,28,1,28,1,28,1,28,3,28,359,8,28,1,28,1,28,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,
		377,8,29,1,30,1,30,1,30,5,30,382,8,30,10,30,12,30,385,9,30,1,31,1,31,1,
		32,1,32,1,33,1,33,3,33,393,8,33,1,33,1,33,1,34,1,34,1,34,3,34,400,8,34,
		1,34,3,34,403,8,34,1,35,1,35,1,35,5,35,408,8,35,10,35,12,35,411,9,35,1,
		36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,5,37,423,8,37,10,37,12,
		37,426,9,37,1,38,1,38,1,38,1,38,1,38,3,38,433,8,38,1,39,1,39,1,39,1,39,
		1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,3,42,451,8,
		42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,460,8,44,10,44,12,44,463,9,
		44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,3,47,476,8,47,
		1,48,1,48,1,48,3,48,481,8,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,490,
		8,49,10,49,12,49,493,9,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		3,50,504,8,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,5,52,513,8,52,10,52,12,
		52,516,9,52,1,53,1,53,1,53,5,53,521,8,53,10,53,12,53,524,9,53,1,54,1,54,
		1,54,3,54,529,8,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,
		56,1,56,3,56,543,8,56,1,57,1,57,3,57,547,8,57,1,58,1,58,1,58,1,58,3,58,
		553,8,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,3,60,562,8,60,1,60,1,60,1,
		60,1,60,5,60,568,8,60,10,60,12,60,571,9,60,1,60,1,60,1,60,1,60,1,60,1,
		60,5,60,579,8,60,10,60,12,60,582,9,60,1,60,1,60,1,60,1,60,1,60,5,60,589,
		8,60,10,60,12,60,592,9,60,1,61,1,61,1,61,1,61,3,61,598,8,61,1,62,1,62,
		1,63,1,63,1,63,1,63,3,63,606,8,63,1,64,1,64,1,65,1,65,1,65,1,65,3,65,614,
		8,65,1,66,1,66,1,67,3,67,619,8,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,
		68,1,68,1,68,1,68,1,68,1,68,3,68,634,8,68,1,69,1,69,1,69,1,69,3,69,640,
		8,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,5,71,650,8,71,10,71,12,71,
		653,9,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,663,8,72,1,73,1,
		73,1,73,5,73,668,8,73,10,73,12,73,671,9,73,1,73,3,73,674,8,73,1,74,1,74,
		1,74,3,74,679,8,74,1,75,1,75,1,75,1,75,1,75,3,75,686,8,75,1,76,1,76,5,
		76,690,8,76,10,76,12,76,693,9,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,
		79,1,80,1,80,1,81,1,81,1,81,1,81,3,81,709,8,81,1,82,1,82,1,82,1,82,1,83,
		1,83,1,83,5,83,718,8,83,10,83,12,83,721,9,83,1,84,1,84,3,84,725,8,84,1,
		85,1,85,1,85,1,85,1,85,1,85,3,85,733,8,85,1,86,1,86,1,86,1,86,1,86,1,86,
		5,86,741,8,86,10,86,12,86,744,9,86,1,86,1,86,1,86,3,86,749,8,86,1,86,1,
		86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,3,88,760,8,88,1,89,1,89,1,89,1,89,
		1,89,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,92,
		1,92,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,
		1,96,5,96,795,8,96,10,96,12,96,798,9,96,1,96,0,0,97,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
		180,182,184,186,188,190,192,0,7,1,0,41,42,1,0,72,73,5,0,4,4,6,6,20,20,
		30,30,70,70,2,0,19,19,49,54,2,0,26,26,41,42,4,0,1,1,9,9,22,22,43,44,2,
		0,11,11,35,35,798,0,194,1,0,0,0,2,216,1,0,0,0,4,218,1,0,0,0,6,229,1,0,
		0,0,8,234,1,0,0,0,10,238,1,0,0,0,12,249,1,0,0,0,14,251,1,0,0,0,16,259,
		1,0,0,0,18,263,1,0,0,0,20,278,1,0,0,0,22,282,1,0,0,0,24,284,1,0,0,0,26,
		286,1,0,0,0,28,288,1,0,0,0,30,290,1,0,0,0,32,292,1,0,0,0,34,294,1,0,0,
		0,36,302,1,0,0,0,38,309,1,0,0,0,40,316,1,0,0,0,42,323,1,0,0,0,44,329,1,
		0,0,0,46,331,1,0,0,0,48,335,1,0,0,0,50,341,1,0,0,0,52,346,1,0,0,0,54,352,
		1,0,0,0,56,354,1,0,0,0,58,376,1,0,0,0,60,378,1,0,0,0,62,386,1,0,0,0,64,
		388,1,0,0,0,66,390,1,0,0,0,68,402,1,0,0,0,70,404,1,0,0,0,72,412,1,0,0,
		0,74,416,1,0,0,0,76,432,1,0,0,0,78,434,1,0,0,0,80,440,1,0,0,0,82,444,1,
		0,0,0,84,450,1,0,0,0,86,452,1,0,0,0,88,455,1,0,0,0,90,466,1,0,0,0,92,470,
		1,0,0,0,94,475,1,0,0,0,96,477,1,0,0,0,98,485,1,0,0,0,100,503,1,0,0,0,102,
		505,1,0,0,0,104,509,1,0,0,0,106,517,1,0,0,0,108,525,1,0,0,0,110,535,1,
		0,0,0,112,542,1,0,0,0,114,546,1,0,0,0,116,552,1,0,0,0,118,554,1,0,0,0,
		120,561,1,0,0,0,122,593,1,0,0,0,124,599,1,0,0,0,126,601,1,0,0,0,128,607,
		1,0,0,0,130,609,1,0,0,0,132,615,1,0,0,0,134,618,1,0,0,0,136,633,1,0,0,
		0,138,639,1,0,0,0,140,641,1,0,0,0,142,646,1,0,0,0,144,662,1,0,0,0,146,
		673,1,0,0,0,148,675,1,0,0,0,150,680,1,0,0,0,152,687,1,0,0,0,154,694,1,
		0,0,0,156,697,1,0,0,0,158,700,1,0,0,0,160,702,1,0,0,0,162,708,1,0,0,0,
		164,710,1,0,0,0,166,714,1,0,0,0,168,724,1,0,0,0,170,726,1,0,0,0,172,734,
		1,0,0,0,174,752,1,0,0,0,176,759,1,0,0,0,178,761,1,0,0,0,180,766,1,0,0,
		0,182,771,1,0,0,0,184,778,1,0,0,0,186,782,1,0,0,0,188,784,1,0,0,0,190,
		786,1,0,0,0,192,791,1,0,0,0,194,196,3,2,1,0,195,197,5,68,0,0,196,195,1,
		0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,199,3,6,3,0,199,200,5,63,0,0,
		200,201,5,0,0,1,201,1,1,0,0,0,202,203,5,29,0,0,203,208,3,4,2,0,204,205,
		5,55,0,0,205,206,3,104,52,0,206,207,5,56,0,0,207,209,1,0,0,0,208,204,1,
		0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,5,47,0,0,211,217,1,0,0,0,
		212,213,5,67,0,0,213,214,3,4,2,0,214,215,5,47,0,0,215,217,1,0,0,0,216,
		202,1,0,0,0,216,212,1,0,0,0,217,3,1,0,0,0,218,219,5,77,0,0,219,5,1,0,0,
		0,220,228,3,10,5,0,221,228,3,14,7,0,222,228,3,34,17,0,223,228,3,88,44,
		0,224,228,3,92,46,0,225,228,3,8,4,0,226,228,5,71,0,0,227,220,1,0,0,0,227,
		221,1,0,0,0,227,222,1,0,0,0,227,223,1,0,0,0,227,224,1,0,0,0,227,225,1,
		0,0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,
		230,232,1,0,0,0,231,229,1,0,0,0,232,233,3,164,82,0,233,7,1,0,0,0,234,235,
		5,69,0,0,235,236,3,104,52,0,236,237,5,47,0,0,237,9,1,0,0,0,238,239,5,21,
		0,0,239,244,3,12,6,0,240,241,5,46,0,0,241,243,3,12,6,0,242,240,1,0,0,0,
		243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,244,
		1,0,0,0,247,248,5,47,0,0,248,11,1,0,0,0,249,250,3,24,12,0,250,13,1,0,0,
		0,251,255,5,8,0,0,252,253,3,16,8,0,253,254,5,47,0,0,254,256,1,0,0,0,255,
		252,1,0,0,0,256,257,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,15,1,0,
		0,0,259,260,3,4,2,0,260,261,5,49,0,0,261,262,3,20,10,0,262,17,1,0,0,0,
		263,264,5,7,0,0,264,265,5,55,0,0,265,266,3,24,12,0,266,267,5,56,0,0,267,
		19,1,0,0,0,268,279,3,22,11,0,269,270,3,28,14,0,270,271,3,22,11,0,271,279,
		1,0,0,0,272,279,3,4,2,0,273,274,3,28,14,0,274,275,3,4,2,0,275,279,1,0,
		0,0,276,279,3,32,16,0,277,279,3,18,9,0,278,268,1,0,0,0,278,269,1,0,0,0,
		278,272,1,0,0,0,278,273,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,21,
		1,0,0,0,280,283,3,24,12,0,281,283,3,26,13,0,282,280,1,0,0,0,282,281,1,
		0,0,0,283,23,1,0,0,0,284,285,5,79,0,0,285,25,1,0,0,0,286,287,5,80,0,0,
		287,27,1,0,0,0,288,289,7,0,0,0,289,29,1,0,0,0,290,291,7,1,0,0,291,31,1,
		0,0,0,292,293,5,78,0,0,293,33,1,0,0,0,294,298,5,36,0,0,295,296,3,36,18,
		0,296,297,5,47,0,0,297,299,1,0,0,0,298,295,1,0,0,0,299,300,1,0,0,0,300,
		298,1,0,0,0,300,301,1,0,0,0,301,35,1,0,0,0,302,303,3,4,2,0,303,307,5,49,
		0,0,304,308,3,42,21,0,305,308,3,38,19,0,306,308,3,40,20,0,307,304,1,0,
		0,0,307,305,1,0,0,0,307,306,1,0,0,0,308,37,1,0,0,0,309,311,5,16,0,0,310,
		312,3,98,49,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,
		5,48,0,0,314,315,3,110,55,0,315,39,1,0,0,0,316,318,5,28,0,0,317,319,3,
		98,49,0,318,317,1,0,0,0,318,319,1,0,0,0,319,41,1,0,0,0,320,324,3,44,22,
		0,321,324,3,52,26,0,322,324,3,86,43,0,323,320,1,0,0,0,323,321,1,0,0,0,
		323,322,1,0,0,0,324,43,1,0,0,0,325,330,3,46,23,0,326,330,3,48,24,0,327,
		330,3,50,25,0,328,330,3,56,28,0,329,325,1,0,0,0,329,326,1,0,0,0,329,327,
		1,0,0,0,329,328,1,0,0,0,330,45,1,0,0,0,331,332,5,55,0,0,332,333,3,104,
		52,0,333,334,5,56,0,0,334,47,1,0,0,0,335,336,3,20,10,0,336,337,5,64,0,
		0,337,338,3,20,10,0,338,49,1,0,0,0,339,342,3,4,2,0,340,342,7,2,0,0,341,
		339,1,0,0,0,341,340,1,0,0,0,342,51,1,0,0,0,343,344,5,27,0,0,344,347,3,
		54,27,0,345,347,3,54,27,0,346,343,1,0,0,0,346,345,1,0,0,0,347,53,1,0,0,
		0,348,353,3,58,29,0,349,353,3,66,33,0,350,353,3,80,40,0,351,353,3,84,42,
		0,352,348,1,0,0,0,352,349,1,0,0,0,352,350,1,0,0,0,352,351,1,0,0,0,353,
		55,1,0,0,0,354,355,5,70,0,0,355,358,5,57,0,0,356,359,3,4,2,0,357,359,3,
		22,11,0,358,356,1,0,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,361,5,59,0,
		0,361,57,1,0,0,0,362,363,5,2,0,0,363,364,5,57,0,0,364,365,3,60,30,0,365,
		366,5,59,0,0,366,367,5,25,0,0,367,368,3,64,32,0,368,377,1,0,0,0,369,370,
		5,2,0,0,370,371,5,58,0,0,371,372,3,60,30,0,372,373,5,60,0,0,373,374,5,
		25,0,0,374,375,3,64,32,0,375,377,1,0,0,0,376,362,1,0,0,0,376,369,1,0,0,
		0,377,59,1,0,0,0,378,383,3,62,31,0,379,380,5,46,0,0,380,382,3,62,31,0,
		381,379,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,61,
		1,0,0,0,385,383,1,0,0,0,386,387,3,44,22,0,387,63,1,0,0,0,388,389,3,42,
		21,0,389,65,1,0,0,0,390,392,5,31,0,0,391,393,3,68,34,0,392,391,1,0,0,0,
		392,393,1,0,0,0,393,394,1,0,0,0,394,395,5,13,0,0,395,67,1,0,0,0,396,399,
		3,70,35,0,397,398,5,47,0,0,398,400,3,74,37,0,399,397,1,0,0,0,399,400,1,
		0,0,0,400,403,1,0,0,0,401,403,3,74,37,0,402,396,1,0,0,0,402,401,1,0,0,
		0,403,69,1,0,0,0,404,409,3,72,36,0,405,406,5,47,0,0,406,408,3,72,36,0,
		407,405,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,71,
		1,0,0,0,411,409,1,0,0,0,412,413,3,104,52,0,413,414,5,48,0,0,414,415,3,
		42,21,0,415,73,1,0,0,0,416,417,5,5,0,0,417,418,3,76,38,0,418,419,5,25,
		0,0,419,424,3,78,39,0,420,421,5,47,0,0,421,423,3,78,39,0,422,420,1,0,0,
		0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,75,1,0,0,0,426,424,
		1,0,0,0,427,428,3,4,2,0,428,429,5,48,0,0,429,430,3,50,25,0,430,433,1,0,
		0,0,431,433,3,50,25,0,432,427,1,0,0,0,432,431,1,0,0,0,433,77,1,0,0,0,434,
		435,3,106,53,0,435,436,5,48,0,0,436,437,5,55,0,0,437,438,3,68,34,0,438,
		439,5,56,0,0,439,79,1,0,0,0,440,441,5,33,0,0,441,442,5,25,0,0,442,443,
		3,82,41,0,443,81,1,0,0,0,444,445,3,44,22,0,445,83,1,0,0,0,446,447,5,14,
		0,0,447,448,5,25,0,0,448,451,3,42,21,0,449,451,5,14,0,0,450,446,1,0,0,
		0,450,449,1,0,0,0,451,85,1,0,0,0,452,453,5,61,0,0,453,454,3,50,25,0,454,
		87,1,0,0,0,455,456,5,38,0,0,456,461,3,90,45,0,457,458,5,47,0,0,458,460,
		3,90,45,0,459,457,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,
		0,0,462,464,1,0,0,0,463,461,1,0,0,0,464,465,5,47,0,0,465,89,1,0,0,0,466,
		467,3,104,52,0,467,468,5,48,0,0,468,469,3,42,21,0,469,91,1,0,0,0,470,471,
		3,94,47,0,471,472,5,47,0,0,472,93,1,0,0,0,473,476,3,96,48,0,474,476,3,
		108,54,0,475,473,1,0,0,0,475,474,1,0,0,0,476,95,1,0,0,0,477,478,5,28,0,
		0,478,480,3,4,2,0,479,481,3,98,49,0,480,479,1,0,0,0,480,481,1,0,0,0,481,
		482,1,0,0,0,482,483,5,47,0,0,483,484,3,6,3,0,484,97,1,0,0,0,485,486,5,
		55,0,0,486,491,3,100,50,0,487,488,5,47,0,0,488,490,3,100,50,0,489,487,
		1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,494,1,0,0,
		0,493,491,1,0,0,0,494,495,5,56,0,0,495,99,1,0,0,0,496,504,3,102,51,0,497,
		498,5,38,0,0,498,504,3,102,51,0,499,500,5,16,0,0,500,504,3,102,51,0,501,
		502,5,28,0,0,502,504,3,102,51,0,503,496,1,0,0,0,503,497,1,0,0,0,503,499,
		1,0,0,0,503,501,1,0,0,0,504,101,1,0,0,0,505,506,3,104,52,0,506,507,5,48,
		0,0,507,508,3,50,25,0,508,103,1,0,0,0,509,514,3,4,2,0,510,511,5,46,0,0,
		511,513,3,4,2,0,512,510,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,
		1,0,0,0,515,105,1,0,0,0,516,514,1,0,0,0,517,522,3,20,10,0,518,519,5,46,
		0,0,519,521,3,20,10,0,520,518,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,
		522,523,1,0,0,0,523,107,1,0,0,0,524,522,1,0,0,0,525,526,5,16,0,0,526,528,
		3,4,2,0,527,529,3,98,49,0,528,527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,
		0,0,530,531,5,48,0,0,531,532,3,110,55,0,532,533,5,47,0,0,533,534,3,6,3,
		0,534,109,1,0,0,0,535,536,3,50,25,0,536,111,1,0,0,0,537,538,3,12,6,0,538,
		539,5,48,0,0,539,540,3,114,57,0,540,543,1,0,0,0,541,543,3,114,57,0,542,
		537,1,0,0,0,542,541,1,0,0,0,543,113,1,0,0,0,544,547,3,116,58,0,545,547,
		3,162,81,0,546,544,1,0,0,0,546,545,1,0,0,0,547,115,1,0,0,0,548,553,3,118,
		59,0,549,553,3,150,75,0,550,553,3,156,78,0,551,553,3,158,79,0,552,548,
		1,0,0,0,552,549,1,0,0,0,552,550,1,0,0,0,552,551,1,0,0,0,553,117,1,0,0,
		0,554,555,3,120,60,0,555,556,5,45,0,0,556,557,3,122,61,0,557,119,1,0,0,
		0,558,559,5,62,0,0,559,562,3,4,2,0,560,562,3,4,2,0,561,558,1,0,0,0,561,
		560,1,0,0,0,562,590,1,0,0,0,563,564,5,57,0,0,564,569,3,122,61,0,565,566,
		5,46,0,0,566,568,3,122,61,0,567,565,1,0,0,0,568,571,1,0,0,0,569,567,1,
		0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,569,1,0,0,0,572,573,5,59,0,0,
		573,589,1,0,0,0,574,575,5,58,0,0,575,580,3,122,61,0,576,577,5,46,0,0,577,
		579,3,122,61,0,578,576,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,
		1,0,0,0,581,583,1,0,0,0,582,580,1,0,0,0,583,584,5,60,0,0,584,589,1,0,0,
		0,585,586,5,63,0,0,586,589,3,4,2,0,587,589,5,61,0,0,588,563,1,0,0,0,588,
		574,1,0,0,0,588,585,1,0,0,0,588,587,1,0,0,0,589,592,1,0,0,0,590,588,1,
		0,0,0,590,591,1,0,0,0,591,121,1,0,0,0,592,590,1,0,0,0,593,597,3,126,63,
		0,594,595,3,124,62,0,595,596,3,122,61,0,596,598,1,0,0,0,597,594,1,0,0,
		0,597,598,1,0,0,0,598,123,1,0,0,0,599,600,7,3,0,0,600,125,1,0,0,0,601,
		605,3,130,65,0,602,603,3,128,64,0,603,604,3,126,63,0,604,606,1,0,0,0,605,
		602,1,0,0,0,605,606,1,0,0,0,606,127,1,0,0,0,607,608,7,4,0,0,608,129,1,
		0,0,0,609,613,3,134,67,0,610,611,3,132,66,0,611,612,3,130,65,0,612,614,
		1,0,0,0,613,610,1,0,0,0,613,614,1,0,0,0,614,131,1,0,0,0,615,616,7,5,0,
		0,616,133,1,0,0,0,617,619,7,0,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,
		620,1,0,0,0,620,621,3,136,68,0,621,135,1,0,0,0,622,634,3,120,60,0,623,
		624,5,55,0,0,624,625,3,122,61,0,625,626,5,56,0,0,626,634,1,0,0,0,627,634,
		3,140,70,0,628,634,3,138,69,0,629,634,3,144,72,0,630,631,5,24,0,0,631,
		634,3,136,68,0,632,634,3,30,15,0,633,622,1,0,0,0,633,623,1,0,0,0,633,627,
		1,0,0,0,633,628,1,0,0,0,633,629,1,0,0,0,633,630,1,0,0,0,633,632,1,0,0,
		0,634,137,1,0,0,0,635,640,3,22,11,0,636,640,3,18,9,0,637,640,3,32,16,0,
		638,640,5,23,0,0,639,635,1,0,0,0,639,636,1,0,0,0,639,637,1,0,0,0,639,638,
		1,0,0,0,640,139,1,0,0,0,641,642,3,4,2,0,642,643,5,55,0,0,643,644,3,142,
		71,0,644,645,5,56,0,0,645,141,1,0,0,0,646,651,3,152,76,0,647,648,5,46,
		0,0,648,650,3,152,76,0,649,647,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,
		651,652,1,0,0,0,652,143,1,0,0,0,653,651,1,0,0,0,654,655,5,57,0,0,655,656,
		3,146,73,0,656,657,5,59,0,0,657,663,1,0,0,0,658,659,5,58,0,0,659,660,3,
		146,73,0,660,661,5,60,0,0,661,663,1,0,0,0,662,654,1,0,0,0,662,658,1,0,
		0,0,663,145,1,0,0,0,664,669,3,148,74,0,665,666,5,46,0,0,666,668,3,148,
		74,0,667,665,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,
		674,1,0,0,0,671,669,1,0,0,0,672,674,1,0,0,0,673,664,1,0,0,0,673,672,1,
		0,0,0,674,147,1,0,0,0,675,678,3,122,61,0,676,677,5,64,0,0,677,679,3,122,
		61,0,678,676,1,0,0,0,678,679,1,0,0,0,679,149,1,0,0,0,680,685,3,4,2,0,681,
		682,5,55,0,0,682,683,3,142,71,0,683,684,5,56,0,0,684,686,1,0,0,0,685,681,
		1,0,0,0,685,686,1,0,0,0,686,151,1,0,0,0,687,691,3,122,61,0,688,690,3,154,
		77,0,689,688,1,0,0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,
		153,1,0,0,0,693,691,1,0,0,0,694,695,5,48,0,0,695,696,3,122,61,0,696,155,
		1,0,0,0,697,698,5,17,0,0,698,699,3,12,6,0,699,157,1,0,0,0,700,701,1,0,
		0,0,701,159,1,0,0,0,702,703,1,0,0,0,703,161,1,0,0,0,704,709,3,164,82,0,
		705,709,3,168,84,0,706,709,3,176,88,0,707,709,3,190,95,0,708,704,1,0,0,
		0,708,705,1,0,0,0,708,706,1,0,0,0,708,707,1,0,0,0,709,163,1,0,0,0,710,
		711,5,3,0,0,711,712,3,166,83,0,712,713,5,13,0,0,713,165,1,0,0,0,714,719,
		3,112,56,0,715,716,5,47,0,0,716,718,3,112,56,0,717,715,1,0,0,0,718,721,
		1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,167,1,0,0,0,721,719,1,0,0,
		0,722,725,3,170,85,0,723,725,3,172,86,0,724,722,1,0,0,0,724,723,1,0,0,
		0,725,169,1,0,0,0,726,727,5,18,0,0,727,728,3,122,61,0,728,729,5,34,0,0,
		729,732,3,112,56,0,730,731,5,12,0,0,731,733,3,112,56,0,732,730,1,0,0,0,
		732,733,1,0,0,0,733,171,1,0,0,0,734,735,5,5,0,0,735,736,3,122,61,0,736,
		737,5,25,0,0,737,742,3,174,87,0,738,739,5,47,0,0,739,741,3,174,87,0,740,
		738,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,748,1,
		0,0,0,744,742,1,0,0,0,745,746,5,47,0,0,746,747,5,12,0,0,747,749,3,166,
		83,0,748,745,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,5,13,0,0,
		751,173,1,0,0,0,752,753,3,106,53,0,753,754,5,48,0,0,754,755,3,112,56,0,
		755,175,1,0,0,0,756,760,3,178,89,0,757,760,3,180,90,0,758,760,3,182,91,
		0,759,756,1,0,0,0,759,757,1,0,0,0,759,758,1,0,0,0,760,177,1,0,0,0,761,
		762,5,39,0,0,762,763,3,122,61,0,763,764,5,10,0,0,764,765,3,112,56,0,765,
		179,1,0,0,0,766,767,5,32,0,0,767,768,3,166,83,0,768,769,5,37,0,0,769,770,
		3,122,61,0,770,181,1,0,0,0,771,772,5,15,0,0,772,773,3,4,2,0,773,774,5,
		45,0,0,774,775,3,184,92,0,775,776,5,10,0,0,776,777,3,112,56,0,777,183,
		1,0,0,0,778,779,3,186,93,0,779,780,7,6,0,0,780,781,3,188,94,0,781,185,
		1,0,0,0,782,783,3,122,61,0,783,187,1,0,0,0,784,785,3,122,61,0,785,189,
		1,0,0,0,786,787,5,40,0,0,787,788,3,192,96,0,788,789,5,10,0,0,789,790,3,
		112,56,0,790,191,1,0,0,0,791,796,3,120,60,0,792,793,5,46,0,0,793,795,3,
		120,60,0,794,792,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,
		0,797,193,1,0,0,0,798,796,1,0,0,0,65,196,208,216,227,229,244,257,278,282,
		300,307,311,318,323,329,341,346,352,358,376,383,392,399,402,409,424,432,
		450,461,475,480,491,503,514,522,528,542,546,552,561,569,580,588,590,597,
		605,613,618,633,639,651,662,669,673,678,685,691,708,719,724,732,742,748,
		759,796
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
